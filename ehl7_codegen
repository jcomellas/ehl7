#!/usr/bin/env escript
%% -*- erlang -*-
%%! -sname ehl7_codegen -pz ebin deps/getopt/ebin deps/bstr/ebin

%%%-------------------------------------------------------------------
%%% @author Juan Jose Comellas <jcomellas@erlar.com>
%%% @copyright (C) 2011 Juan Jose Comellas
%%% @doc Module that generates code to decode/encode HL7 segments.
%%% @end
%%% This source file is subject to the New BSD License. You should have received
%%% a copy of the New BSD license with this software. If not, it can be
%%% retrieved from: http://www.opensource.org/licenses/bsd-license.php
%%%-------------------------------------------------------------------
-module(ehl7_codegen).
-author('Juan Jose Comellas <jcomellas@erlar.com>').

-export([main/1]).

-define(DEFAULT_HEADER_FILE, "include/ehl7_segment.hrl").
-define(DEFAULT_SOURCE_FILE, "src/ehl7_segment.erl").


main(Args) ->
    OptSpecList = option_spec_list(),
    case getopt:parse(OptSpecList, Args) of
        {ok, {Options, _NonOptArgs}} ->
            case lists:member(help, Options) of
                true ->
                    getopt:usage(OptSpecList, escript:script_name());
                false ->
                    ehl7_segment_def:codegen(Options)
            end;
        {error, {Reason, Data}} ->
            io:format("Error: ~s ~p~n~n", [Reason, Data]),
            getopt:usage(OptSpecList, escript:script_name())
    end.


option_spec_list() ->
    [
     %% {Name,     ShortOpt,  LongOpt,       ArgSpec,                        HelpMsg}
     {help,        $?,        "help",        undefined,                      "Show the program options"},
     {verbose,     $v,        "verbose",     undefined,                      "Verbose output"},
     {header,      $h,        "hrl",         {string, ?DEFAULT_HEADER_FILE}, "File where the generated header will be saved to"},
     {source,      $e,        "erl",         {string, ?DEFAULT_SOURCE_FILE}, "File where the generated code will be saved to"}
    ].
