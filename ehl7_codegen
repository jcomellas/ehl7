#!/usr/bin/env escript
%% -*- erlang -*-
%%! -sname ehl7_codegen -pz deps/bstr/ebin deps/getopt/ebin

-module(ehl7_codegen).
-author('Juan Jose Comellas <jcomellas@erlar.com>').

-export([codegen/1, get_segment_defs/0]).

-type segment_id() :: binary().
-type element_name() :: atom().
-type element_type() :: 'field' | 'repetition' | 'component' | 'subcomponent'.
-type element_index() :: non_neg_integer() | [non_neg_integer()].
-type element_data_type() :: 'integer' | 'float' | 'date' | 'string'.

-type element_def() :: {element_name(), element_type(), element_index(), element_data_type(), non_neg_integer()}.
-type segment_def() :: {segment_id(), Comment :: binary(), [element_def()]}.


main([]) ->
    getopt:usage(option_spec_list(), escript:script_name());
main(Args) ->
    OptSpecList = option_spec_list(),
    case getopt:parse(OptSpecList, Args) of
        {ok, {Options, _NonOptArgs}} ->
            codegen(Options);
        {error, {Reason, Data}} ->
            io:format("Error: ~s ~p~n~n", [Reason, Data]),
            getopt:usage(OptSpecList, escript:script_name())
    end.


option_spec_list() ->
    [
     %% {Name,     ShortOpt,  LongOpt,       ArgSpec,                      HelpMsg}
     {help,        $?,        "help",        undefined,
      "Show the program options"},
     {verbose,     $v,        "verbose",     {boolean, false},
      "Verbose output"},
     {header,      undefined, undefined,     {string, "include/ehl7_segment.hrl"},
      "File where the generated header will be saved to"},
     {source,      undefined, undefined,     {string, "src/ehl7_segment.erl"},
      "File where the generated code will be saved to"}
    ].


codegen(Options) ->
    Header = proplists:get_value(header, Options),
    Source = proplists:get_value(source, Options),
    io:format("Generating header in file ~s~n", [Header]),
    file:write_file(Header, codegen_segment_header(Header, Source)),
    io:format("Generating source in file ~s~n", [Source]),
    file:write_file(Source, codegen_segment_source(Header, Source)).


codegen_segment_header(Header, Source) ->
    codegen_segment_header(Header, Source, get_segment_defs()).


-spec codegen_segment_header(Header :: string(), Source :: string(), [segment_def()]) -> iolist().
codegen_segment_header(Header, Source, SegmentDefs) ->
    [
     file_header(), $\n,
     codegen_segment_header(Header, Source, SegmentDefs, [])
    ].

codegen_segment_header(Header, Source, [SegmentDef | Tail], Acc) ->
    codegen_segment_header(Header, Source, Tail, [codegen_segment_record(SegmentDef) | Acc]);
codegen_segment_header(_Header, _Source, [], Acc) ->
    lists:reverse(Acc).


-spec codegen_segment_record(segment_def()) -> iolist().
codegen_segment_record({SegmentId, Description, ElementDefs}) ->
    RecordName = bstr:lower(SegmentId),
    [<<"%% ", SegmentId/binary, ": ", Description/binary, $\n>>,
     <<"-record(", RecordName/binary, ", {\n">> | codegen_segment_record_1(ElementDefs, [])].

-spec codegen_segment_record_1([element_def()], list()) -> iolist().
codegen_segment_record_1([{Name, _Type, _Index, DataType, Length} | Tail], Acc) ->
    Indentation = <<"          ">>,
    LineEnd = case Tail of
                  [] ->
                      <<"\n         }).\n\n">>;
                  _ ->
                      <<",\n">>
              end,
    codegen_segment_record_1(Tail, [[Indentation, atom_to_binary(Name, latin1), type_spec(DataType, Length), LineEnd] | Acc]);
codegen_segment_record_1([], Acc) ->
    lists:reverse(Acc).


codegen_segment_source(Header, Source) ->
    codegen_segment_source(Header, Source, get_segment_defs()).

codegen_segment_source(Header, Source, SegmentDefs) ->
    Decoder = [
               file_header(),
               <<"-module(">>, filename:basename(Source, ".erl"), <<").\n">>,
               <<"-author('">>, file_author(), <<"').\n\n">>,
               <<"-include(\"">>, Header, <<"\").\n\n">>,
               <<
                 "-import(ehl7, [get_field/4]).\n"
                 "-export([decode/1]).\n"
                 "\n\n"
                 "%% Decode a segment encoded as a tuple and convert it to a record\n"
                 "decode(Segment) ->\n"
                 "    SegmentId = binary_to_atom(bstr:lower(element(1, Segment)), latin1),\n"
                 "    decode(SegmentId, Segment).\n\n\n"
               >>
              ],
    [Decoder | codegen_segment_decoder(SegmentDefs, [])].


codegen_segment_decoder([{SegmentId, Description, ElementDefs} | Tail], Acc) ->
    RecordName = bstr:lower(SegmentId),
    Decoder = [
               [<<"%% Decode the ">>, SegmentId, <<" (">>, Description, <<") segment\n">>],
               [<<"decode(">>, RecordName, <<", Segment) ->\n">>],
               [<<"    #">>, RecordName, <<"{\n">>] |
               codegen_element_decoder(ElementDefs, [])
              ],
    codegen_segment_decoder(Tail, [Decoder | Acc]);
codegen_segment_decoder([], Acc) ->
    Decoder  = [
                <<"decode(_SegmentId, Segment) ->\n">>,
                <<"    {error, {unknown_segment_id, element(1, Segment)}}.\n">>
               ],
    lists:reverse([Decoder | Acc]).


codegen_element_decoder([{Name, _Type, Index, DataType, Length} | Tail], Acc) ->
    Indentation = <<"        ">>,
    LineEnd = case Tail of
                  [] ->
                      <<"\n       };\n">>;
                  _ ->
                      <<",\n">>
              end,
    %% Adjust 0-based offsets to the 1-based positions used by element/2
    ElementIndex = case is_list(Index) of
                       true ->
                           [N + 1 || N <- Index];
                       false ->
                           Index + 1
                   end,
    Line = io_lib:format("~s = get_field(~w, ~s, ~w, Segment)", [Name, ElementIndex, DataType, Length]),
    codegen_element_decoder(Tail, [[Indentation, Line, LineEnd] | Acc]);
codegen_element_decoder([], Acc) ->
    lists:reverse(Acc).


-spec type_spec(element_data_type(), non_neg_integer()) -> binary().
type_spec(integer, _Length) ->
    <<" :: integer()">>;
type_spec(float, _Length) ->
    <<" :: float()">>;
type_spec(date, 8) ->
    <<" :: calendar:date()">>;
type_spec(date, Length) when Length > 8 ->
    <<" :: calendar:datetime()">>;
type_spec(string, _Length) ->
    <<" :: binary()">>.


-spec file_author() -> binary().
file_author() ->
    <<"Juan Jose Comellas <jcomellas@erlar.com>">>.


-spec file_copyright() -> binary().
file_copyright() ->
    <<"(C) 2011 Juan Jose Comellas">>.


-spec file_header() -> binary().
file_header() ->
    [
     <<
       "%%%-------------------------------------------------------------------\n"
       "%%% @author "
     >>, file_author(), $\n,
     <<
       "%%% @copyright "
     >>, file_copyright(), $\n,
     <<
       "%%% @doc Module that parses and generates segments for HL7 messages.\n"
       "%%% @end\n"
       "%%% This source file is subject to the New BSD License. You should have received\n"
       "%%% a copy of the New BSD license with this software. If not, it can be\n"
       "%%% retrieved from: http://www.opensource.org/licenses/bsd-license.php\n"
       "%%%-------------------------------------------------------------------\n"
     >>
    ].


-spec get_segment_defs() -> [segment_def()].
get_segment_defs() ->
    [
     %% AUT: Authorization information
     {<<"AUT">>, <<"Authorization information">>,
      [
       {plan_id,                               component,    [0, 0],    string,   10},
       {plan_name,                             component,    [0, 1],    string,   20},
       {company_id,                            component,    [1, 0],    string,    6},
       {company_name,                          component,    [1, 1],    string,   30},
       {company_id_coding_system,              component,    [1, 2],    string,   20},
       {start_date,                            field,        3,         date,      8},
       {end_date,                              field,        4,         date,      8},
       {authorization_id,                      component,    [5, 0],    string,   20},
       {requested_treatments,                  field,        7,         integer,   2},
       {authorized_treatments,                 field,        8,         integer,   2}
      ]},
     %% DG1: Diagnosis information
     {<<"DG1">>, <<"Diagnosis information">>,
      [
       {set_id,                                field,       0,         integer,   4},
       {diagnosis_id,                          component,   [2, 0],    string,   20},
       {name,                                  component,   [2, 1],    string,   32},
       {coding_system,                         component,   [2, 2],    string,   10},
       {diagnosis_type,                        field,       5,         string,    2}
      ]},
     %% DSC: Continuation pointer
     {<<"DSC">>, <<"Continuation pointer">>,
      [
       {continuation_pointer,                  field,        0,         string,   15}
      ]},
     %% DSP: Display data
     {<<"DSP">>, <<"Display data">>,
      [
       {set_id,                                field,        0,         integer,   4},
       {display_level,                         field,        1,         string,    4},
       {data_line,                             field,        2,         string,   40},
       {break_point,                           field,        3,         string,    2},
       {result_id,                             field,        4,         string,   20}
      ]},
     %% ERR: Error information
     {<<"ERR">>, <<"Error information">>,
      [
       {segment_id,                            component,    [0, 0],    string,    3},
       {sequence,                              component,    [0, 1],    integer,   3},
       {field_pos,                             component,    [0, 2],    integer,   3},
       {error_code,                            subcomponent, [0, 3, 0], string,    9},
       {error_text,                            subcomponent, [0, 3, 1], string,   61}
      ]},
     %% EVN: Event type
     {<<"EVN">>, <<"Event type">>,
      [
       {recorded_date,                         field,        1,         date,     14},
       {planned_event_date,                    field,        2,         date,     14}
      ]},
     %% IN1: Insurance
     {<<"IN1">>, <<"Insurance">>,
      [
       {set_id,                                field,        0,         integer,   4},
       {plan_id,                               component,    [1, 0],    string,   20},
       {plan_name,                             component,    [1, 1],    string,   30},
       {company_id,                            component,    [2, 0],    string,   6},
       {company_assigning_authority_id,        subcomponent, [2, 3, 0], string,   10},
       {company_id_type,                       subcomponent, [2, 3, 4], string,   10},
       {authorization_number,                  component,    [13, 0],   string,   20},
       {auhtorization_date,                    component,    [13, 1],   date,      8}
      ]},
     %% MSA: Message acknowledgment
     {<<"MSA">>, <<"Message acknowledgment">>,
      [
       {ack_code,                              field,        0,         string,    2},
       {message_control_id,                    field,        1,         string,   20},
       {error_code,                            component,    [5, 0],    string,   10},
       {error_text,                            component,    [5, 1],    string,   40}
      ]},
     %% MSH: Message header
     {<<"MSH">>, <<"Message header">>,
      [
       {field_separator,                       field,        0,         string,    1},
       {encoding_characters,                   field,        1,         string,    4},
       {sending_application_id,                component,    [2, 0],    string,   12},
       {sending_facility_id,                   component,    [3, 0],    string,   12},
       {sending_facility_universal_id,         component,    [3, 1],    string,   20},
       {sending_facility_universal_id_type,    component,    [3, 2],    string,   20},
       {receiving_application_id,              component,    [4, 0],    string,   12},
       {receiving_facility_id,                 component,    [5, 0],    string,   12},
       {receiving_facility_universal_id,       component,    [5, 1],    string,   20},
       {receiving_facility_universal_id_type,  component,    [5, 2],    string,   20},
       {message_date,                          field,        6,         date,     14},
       {message_type,                          component,    [8, 0],    string,    3},
       {trigger_event,                         component,    [8, 1],    string,    3},
       {message_structure,                     component,    [8, 2],    string,    7},
       {message_control_id,                    field,        9,         string,   20},
       {processing_id,                         field,        [10],      string,    3},
       {version,                               field,        [11],      string,    8},
       {accept_ack_type,                       field,        [14],      string,    2},
       {application_ack_type,                  field,        [15],      string,    2},
       {country_code,                          field,        [16],      string,    3}
      ]},
     %% NTE: Notes and comments
     {<<"NTE">>, <<"Notes and comments">>,
      [
       {set_id,                                field,        0,         integer,   4},
       {comment,                               field,        2,         string,  512}
      ]},
     %% PID: Patient information
     {<<"PID">>, <<"Patient information">>,
      [
       {set_id,                                field,        0,         integer,   4},
       %% Repetition 0
       {patient_id,                            component,    [2, 0, 0], string,   20},
       %% Repetition 1
       {patient_document_id,                   component,    [2, 0, 0], string,   20},
       {assigning_authority_id,                subcomponent, [2, 3, 0], string,    6},
       {assigning_authority_universal_id,      subcomponent, [2, 3, 1], string,    6},
       {assigning_authority_universal_id_type, subcomponent, [2, 3, 2], string,   10},
       {id_type,                               component,    [2, 4],    string,    2},
       {last_name,                             component,    [4, 0],    string,   25},
       {first_name,                            component,    [4, 1],    string,   25}
      ]},
     %% PR1: Procedure information
     {<<"PR1">>, <<"Procedure information">>,
      [
       {set_id,                                field,        0,         integer,   4},
       {procedure_id,                          component,    [2, 0],    string,   20},
       {procedure_name,                        component,    [2, 1],    string,   30},
       {coding_system,                         component,    [2, 2],    string,    4},
       {date,                                  field,        4,         date,     14}
      ]},
     %% PRD: Provider data
     {<<"PRD">>, <<"Provider data">>,
      [
       %% Repetition 0
       {role_id,                               component,    [0, 0, 0], string,    5},
       {role_name,                             component,    [0, 0, 1], string,   30},
       {role_coding_system,                    component,    [0, 0, 2], string,    7},
       %% Repetition 1
       {specialty_id,                          component,    [0, 1, 0], string,    5},
       {specialty_name,                        component,    [0, 1, 1], string,   30},
       {specialty_coding_system,               component,    [0, 1, 2], string,    7},
       {last_name,                             component,    [1, 0],    string,   40},
       {first_name,                            component,    [1, 1],    string,   30},
       {street,                                component,    [2, 0],    string,   20},
       {other_designation,                     component,    [2, 1],    string,   20},
       {city,                                  component,    [2, 2],    string,   30},
       {state,                                 component,    [2, 3],    string,    1},
       {postal_code,                           component,    [2, 4],    string,   10},
       {country_code,                          component,    [2, 5],    string,    3},
       {address_type,                          component,    [2, 6],    string,    1},
       {provider_id,                           component,    [6, 0],    string,   15},
       %% {provider_id_type,                      component,    [6, 1],    string,    4},
       {provider_id_type,                      subcomponent, [6, 1, 0], string,    2},
       {provider_id_type_medical,              subcomponent, [6, 1, 1], string,    1},
       {provider_id_type_province,             subcomponent, [6, 1, 2], string,    1},
       {provider_id_alternate_qualifier,       component,    [6, 2],    string,    8}
      ]},
     %% PV1: Patient visit
     {<<"PV1">>, <<"Patient visit">>,
      [
       {set_id,                                field,        0,         string,    4},
       {patient_class,                         field,        1,         string,    1},
       %% {assigned_patient_location,             field,        2,         string,   34},
       {patient_point_of_care,                 component,    [2, 0],    string,   10},
       {patient_location_facility,             component,    [2, 3],    string,   21},
       {admission_type,                        field,        3,         string,   34},
       %% {attending_doctor,                      field,        6,         string,   99},
       {attending_doctor_id,                   component,    [6, 0],    string,   20},
       {attending_doctor_last_name,            component,    [6, 1],    string,   25},
       {attending_doctor_first_name,           component,    [6, 2],    string,   25},
       {attending_doctor_assigning_authority,  component,    [6, 8],    string,   21},
       %% {referring_doctor,                      field,        7,         string,   99},
       {referring_doctor_id,                   component,    [7, 0],    string,   20},
       {referring_doctor_last_name,            component,    [7, 1],    string,   25},
       {referring_doctor_first_name,           component,    [7, 2],    string,   25},
       {referring_doctor_assigning_authority,  component,    [7, 8],    string,   21},
       {hospital_service,                      field,        9,         string,   99},
       {readmission_indicator,                 field,        [12],      string,    2},
       {discharge_diposition,                  field,        [35],      string,    3},
       {admit_date,                            field,        [43],      date,     12},
       {discharge_date,                        field,        [44],      date,     12},
       {visit_indicator,                       field,        [50],      string,    1}
      ]},
     %% PV2: Patient visit - additional information
     {<<"PV2">>, <<"Patient visit - additional information">>,
      [
       %% {transfer_reason,                       field,        3,         string,   20},
       {transfer_reason_id,                    component,    [3, 0],    string,   20}
      ]},
     %% QAK: Query acknowledgment
     {<<"QAK">>, <<"Query acknowledgment">>,
      [
       {query_tag,                             field,        0,         string,   32},
       {query_response_status,                 field,        1,         string,    4},
       {query_id,                              component,    [2, 0],    string,   14},
       {query_name,                            component,    [2, 1],    string,   30}
      ]},
     %% QPD: Query parameter definition
     {<<"QPD_Q15">>, <<"Query parameter definition -- procedure totals query">>,
      [
       %% {message_query_name,                    field,        0,         string,   50},
       {query_id,                              component,    [0, 0],    string,   20},
       {query_name,                            component,    [0, 1],    string,   30},
       {query_tag,                             field,        1,         string,   32},
       {provider_id,                           component,    [2, 0],    string,   15},
       {provider_id_type,                      component,    [2, 1],    string,    4},
       {start_date,                            field,        3,         date,     12},
       {end_date,                              field,        4,         date,     12},
       {procedure_id,                          component,    [5, 0],    string,   30},
       {procedure_coding_system,               component,    [5, 1],    string,    8},
       {authorizer_id,                         component,    [6, 0],    string,    6}
      ]},
     %% RCP: Response control parameter
     {<<"RCP">>, <<"Response control parameter">>,
      [
       {query_priority,                        field,        0,         string,    1},
       {response_limit,                        component,    [1, 0],    integer,  10},
       {response_unit,                         subcomponent, [1, 1, 0], string,    2},
       {response_modality_id,                  component,    [2, 0],    string,   10},
       {execution_date,                        field,        3,         date,     12},
       {sort_by,                               field,        5,         string,   512}
      ]},
     %% RF1: Referral information
     {<<"RF1">>, <<"Referral information">>,
      [
       %% {referral_status,                       field,        0,         string,   21},
       {referral_status_id,                    component,    [0, 0],    string,    5},
       {referral_status_description,           component,    [0, 1],    string,   15},
       %% {referral_type,                         field,        2,         string,   21},
       {referral_type_id,                      component,    [2, 0],    string,    5},
       {referral_type_description,             component,    [2, 1],    string,   15},
       %% {originating_referral_id,               field,        [5, 0],    string,   15},
       {originating_referral_id,               component,    [5, 0],    string,   15},
       {effective_date,                        field,        6,         date,     12},
       {expiration_date,                       field,        7,         date,     12},
       {process_date,                          field,        8,         date,     12},
       %% {referral_reason,                       field,        9,         string,   21},
       {referral_reason_id,                    component,    [9, 0],    string,   21}
      ]},
     %% ZAU: Procedure authorization information
     {<<"ZAU">>, <<"Procedure authorization information">>,
      [
       {prev_authorization_id,                 component,    [0, 0],    string,   15},
       {payor_control_id,                      component,    [1, 0],    string,   15},
       {authorization_status,                  component,    [2, 0],    string,    4},
       {authorization_status_text,             component,    [2, 1],    string,   15},
       {pre_authorization_id,                  component,    [3, 0],    string,   15},
       {pre_authorization_date,                field,        4,         string,    8},
       {copay,                                 subcomponent, [5, 0, 0], string,   10},
       {copay_currency,                        subcomponent, [5, 0, 1], string,   10}
      ]},
     %% ZIN: Additional insurance information
     {<<"ZIN">>, <<"Additional insurance information">>,
      [
       {eligibility_indicator,                 field,        0,         string,    1},
       {patient_vat_status,                    component,    [1, 0],    string,    4},
       {patient_vat_status_text,               component,    [1, 1],    string,    7}
      ]}
    ].
