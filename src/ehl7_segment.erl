%%%-------------------------------------------------------------------
%%% @author Juan Jose Comellas <jcomellas@erlar.com>
%%% @copyright (C) 2011 Juan Jose Comellas
%%% @doc Module that parses and generates segments for HL7 messages.
%%% @end
%%%
%%% This file was autogenerated. DO NOT MODIFY.
%%%
%%% This source file is subject to the New BSD License. You should have received
%%% a copy of the New BSD license with this software. If not, it can be
%%% retrieved from: http://www.opensource.org/licenses/bsd-license.php
%%%-------------------------------------------------------------------
-module(ehl7_segment).
-author('Juan Jose Comellas <jcomellas@erlar.com>').

-include("include/ehl7_segment.hrl").

-import(ehl7_field, [get_field/4, get_component/4, get_subcomponent/4, to_raw_value/3]).
-export([decode/1, encode/1, encode/2]).

-type encode_options() :: 'tuple' | 'list'.


%% @doc Decode a segment encoded as a tuple and convert it to a record
-spec decode(ehl7:raw_segment()) -> ehl7:segment().
decode(RawSegment) ->
    SegmentId = binary_to_atom(bstr:lower(element(1, RawSegment)), latin1),
    decode(SegmentId, RawSegment).


%% @doc Encode a segment record and convert it to a tuple
-spec encode(ehl7:segment()) -> ehl7:raw_segment().
encode(Segment) ->
    SegmentId = element(1, Segment),
    encode_as_tuple(SegmentId, Segment).


%% @doc Encode a segment record and convert it to a list or tuple depending on the Options
-spec encode(ehl7:segment(), encode_options()) -> ehl7:raw_segment().
encode(Segment, Options) ->
    SegmentId = element(1, Segment),
    case lists:member(list, Options) of
        true ->
            encode_as_list(SegmentId, Segment);
        false ->
            encode_as_tuple(SegmentId, Segment)
    end.


%% @doc Decode the AUT (Authorization information) segment
decode(aut, Segment) ->
    #aut{
        plan_id = get_component([1,1,1], string, 10, Segment),
        plan_name = get_component([1,1,2], string, 20, Segment),
        company_id = get_component([2,1,1], string, 6, Segment),
        company_name = get_component([2,1,2], string, 30, Segment),
        company_id_coding_system = get_component([2,1,3], string, 20, Segment),
        start_date = get_field([4], date, 8, Segment),
        end_date = get_field([5], date, 8, Segment),
        authorization_id = get_component([6,1,1], string, 20, Segment),
        requested_treatments = get_field([8], integer, 2, Segment),
        authorized_treatments = get_field([9], integer, 2, Segment)
       };
%% @doc Decode the DG1 (Diagnosis information) segment
decode(dg1, Segment) ->
    #dg1{
        set_id = get_field([1], integer, 4, Segment),
        diagnosis_id = get_component([3,1,1], string, 20, Segment),
        name = get_component([3,1,2], string, 32, Segment),
        coding_system = get_component([3,1,3], string, 10, Segment),
        diagnosis_type = get_field([6], string, 2, Segment)
       };
%% @doc Decode the DSC (Continuation pointer) segment
decode(dsc, Segment) ->
    #dsc{
        continuation_pointer = get_field([1], string, 15, Segment)
       };
%% @doc Decode the DSP (Display data) segment
decode(dsp, Segment) ->
    #dsp{
        set_id = get_field([1], integer, 4, Segment),
        display_level = get_field([2], string, 4, Segment),
        data_line = get_field([3], string, 40, Segment),
        break_point = get_field([4], string, 2, Segment),
        result_id = get_field([5], string, 20, Segment)
       };
%% @doc Decode the ERR (Error information) segment
decode(err, Segment) ->
    #err{
        segment_id = get_component([1,1,1], string, 3, Segment),
        sequence = get_component([1,1,2], integer, 3, Segment),
        field_pos = get_component([1,1,3], integer, 3, Segment),
        error_code = get_subcomponent([1,1,4,1], string, 9, Segment),
        error_text = get_subcomponent([1,1,4,2], string, 61, Segment)
       };
%% @doc Decode the EVN (Event type) segment
decode(evn, Segment) ->
    #evn{
        recorded_date = get_field([2], date, 14, Segment),
        planned_event_date = get_field([3], date, 14, Segment),
        event_reason_code = get_field([4], string, 3, Segment)
       };
%% @doc Decode the IN1 (Insurance) segment
decode(in1, Segment) ->
    #in1{
        set_id = get_field([1], integer, 4, Segment),
        plan_id = get_component([2,1,1], string, 20, Segment),
        plan_name = get_component([2,1,2], string, 30, Segment),
        company_id = get_component([3,1,1], string, 6, Segment),
        company_assigning_authority_id = get_subcomponent([3,1,4,1], string, 10, Segment),
        company_id_type = get_subcomponent([3,1,4,5], string, 10, Segment),
        authorization_number = get_component([14,1,1], string, 20, Segment),
        auhtorization_date = get_component([14,1,2], date, 8, Segment)
       };
%% @doc Decode the MSA (Message acknowledgment) segment
decode(msa, Segment) ->
    #msa{
        ack_code = get_field([1], string, 2, Segment),
        message_control_id = get_field([2], string, 20, Segment),
        error_code = get_component([6,1,1], string, 10, Segment),
        error_text = get_component([6,1,2], string, 40, Segment)
       };
%% @doc Decode the MSH (Message header) segment
decode(msh, Segment) ->
    #msh{
        field_separator = get_field([1], string, 1, Segment),
        encoding_characters = get_field([2], string, 4, Segment),
        sending_application_id = get_component([3,1,1], string, 12, Segment),
        sending_facility_id = get_component([4,1,1], string, 12, Segment),
        sending_facility_universal_id = get_component([4,1,2], string, 20, Segment),
        sending_facility_universal_id_type = get_component([4,1,3], string, 20, Segment),
        receiving_application_id = get_component([5,1,1], string, 12, Segment),
        receiving_facility_id = get_component([6,1,1], string, 12, Segment),
        receiving_facility_universal_id = get_component([6,1,2], string, 20, Segment),
        receiving_facility_universal_id_type = get_component([6,1,3], string, 20, Segment),
        message_date = get_field([7], date, 14, Segment),
        message_type = get_component([9,1,1], string, 3, Segment),
        trigger_event = get_component([9,1,2], string, 3, Segment),
        message_structure = get_component([9,1,3], string, 7, Segment),
        message_control_id = get_field([10], string, 20, Segment),
        processing_id = get_field([11], string, 3, Segment),
        version = get_field([12], string, 8, Segment),
        accept_ack_type = get_field([15], string, 2, Segment),
        application_ack_type = get_field([16], string, 2, Segment),
        country_code = get_field([17], string, 3, Segment)
       };
%% @doc Decode the NTE (Notes and comments) segment
decode(nte, Segment) ->
    #nte{
        set_id = get_field([1], integer, 4, Segment),
        comment = get_field([3], string, 512, Segment)
       };
%% @doc Decode the PID (Patient information) segment
decode(pid, Segment) ->
    #pid{
        set_id = get_field([1], integer, 4, Segment),
        patient_id = get_component([3,1,1], string, 20, Segment),
        assigning_authority_id = get_subcomponent([3,1,4,1], string, 6, Segment),
        assigning_authority_universal_id = get_subcomponent([3,1,4,2], string, 6, Segment),
        assigning_authority_universal_id_type = get_subcomponent([3,1,4,3], string, 10, Segment),
        id_type = get_component([3,1,5], string, 2, Segment),
        patient_document_id = get_component([3,2,1], string, 20, Segment),
        patient_document_id_type = get_component([3,2,5], string, 2, Segment),
        last_name = get_component([5,1,1], string, 25, Segment),
        first_name = get_component([5,1,2], string, 25, Segment)
       };
%% @doc Decode the PR1 (Procedure information) segment
decode(pr1, Segment) ->
    #pr1{
        set_id = get_field([1], integer, 4, Segment),
        procedure_id = get_component([3,1,1], string, 20, Segment),
        procedure_name = get_component([3,1,2], string, 30, Segment),
        coding_system = get_component([3,1,3], string, 4, Segment),
        date = get_field([5], date, 14, Segment)
       };
%% @doc Decode the PRD (Provider data) segment
decode(prd, Segment) ->
    #prd{
        role_id = get_component([1,1,1], string, 5, Segment),
        role_name = get_component([1,1,2], string, 30, Segment),
        role_coding_system = get_component([1,1,3], string, 7, Segment),
        specialty_id = get_component([1,2,1], string, 5, Segment),
        specialty_name = get_component([1,2,2], string, 30, Segment),
        specialty_coding_system = get_component([1,2,3], string, 7, Segment),
        last_name = get_component([2,1,1], string, 40, Segment),
        first_name = get_component([2,1,2], string, 30, Segment),
        street = get_component([3,1,1], string, 20, Segment),
        other_designation = get_component([3,1,2], string, 20, Segment),
        city = get_component([3,1,3], string, 30, Segment),
        state = get_component([3,1,4], string, 1, Segment),
        postal_code = get_component([3,1,5], string, 10, Segment),
        country_code = get_component([3,1,6], string, 3, Segment),
        address_type = get_component([3,1,7], string, 1, Segment),
        provider_id = get_component([7,1,1], string, 15, Segment),
        provider_id_type = get_subcomponent([7,1,2,1], string, 2, Segment),
        provider_id_type_medical = get_subcomponent([7,1,2,2], string, 1, Segment),
        provider_id_type_province = get_subcomponent([7,1,2,3], string, 1, Segment),
        provider_id_alternate_qualifier = get_component([7,1,3], string, 8, Segment)
       };
%% @doc Decode the PV1 (Patient visit) segment
decode(pv1, Segment) ->
    #pv1{
        set_id = get_field([1], string, 4, Segment),
        patient_class = get_field([2], string, 1, Segment),
        patient_point_of_care = get_component([3,1,1], string, 10, Segment),
        patient_location_facility = get_component([3,1,4], string, 21, Segment),
        admission_type = get_field([4], string, 34, Segment),
        attending_doctor_id = get_component([7,1,1], string, 20, Segment),
        attending_doctor_last_name = get_component([7,1,2], string, 25, Segment),
        attending_doctor_first_name = get_component([7,1,3], string, 25, Segment),
        attending_doctor_assigning_authority = get_component([7,1,9], string, 21, Segment),
        referring_doctor_id = get_component([8,1,1], string, 20, Segment),
        referring_doctor_last_name = get_component([8,1,2], string, 25, Segment),
        referring_doctor_first_name = get_component([8,1,3], string, 25, Segment),
        referring_doctor_assigning_authority = get_component([8,1,9], string, 21, Segment),
        hospital_service = get_field([10], string, 99, Segment),
        readmission_indicator = get_field([13], string, 2, Segment),
        discharge_diposition = get_field([36], string, 3, Segment),
        admit_date = get_field([44], date, 12, Segment),
        discharge_date = get_field([45], date, 12, Segment),
        visit_indicator = get_field([51], string, 1, Segment)
       };
%% @doc Decode the PV2 (Patient visit - additional information) segment
decode(pv2, Segment) ->
    #pv2{
        transfer_reason_id = get_component([4,1,1], string, 20, Segment)
       };
%% @doc Decode the QAK (Query acknowledgment) segment
decode(qak, Segment) ->
    #qak{
        query_tag = get_field([1], string, 32, Segment),
        query_response_status = get_field([2], string, 4, Segment),
        query_id = get_component([3,1,1], string, 14, Segment),
        query_name = get_component([3,1,2], string, 30, Segment)
       };
%% @doc Decode the QPD_Q15 (Query parameter definition -- procedure totals query) segment
decode(qpd_q15, Segment) ->
    #qpd_q15{
        query_id = get_component([1,1,1], string, 20, Segment),
        query_name = get_component([1,1,2], string, 30, Segment),
        query_tag = get_field([2], string, 32, Segment),
        provider_id = get_component([3,1,1], string, 15, Segment),
        provider_id_type = get_component([3,1,2], string, 4, Segment),
        start_date = get_field([4], date, 12, Segment),
        end_date = get_field([5], date, 12, Segment),
        procedure_id = get_component([6,1,1], string, 30, Segment),
        procedure_coding_system = get_component([6,1,2], string, 8, Segment),
        authorizer_id = get_component([7,1,1], string, 6, Segment)
       };
%% @doc Decode the RCP (Response control parameter) segment
decode(rcp, Segment) ->
    #rcp{
        query_priority = get_field([1], string, 1, Segment),
        response_limit = get_component([2,1,1], integer, 10, Segment),
        response_unit = get_subcomponent([2,1,2,1], string, 2, Segment),
        response_modality_id = get_component([3,1,1], string, 10, Segment),
        execution_date = get_field([4], date, 12, Segment),
        sort_by = get_field([6], string, 512, Segment)
       };
%% @doc Decode the RF1 (Referral information) segment
decode(rf1, Segment) ->
    #rf1{
        referral_status_id = get_component([1,1,1], string, 5, Segment),
        referral_status_description = get_component([1,1,2], string, 15, Segment),
        referral_type_id = get_component([3,1,1], string, 5, Segment),
        referral_type_description = get_component([3,1,2], string, 15, Segment),
        originating_referral_id = get_component([6,1,1], string, 15, Segment),
        effective_date = get_field([7], date, 12, Segment),
        expiration_date = get_field([8], date, 12, Segment),
        process_date = get_field([9], date, 12, Segment),
        referral_reason_id = get_component([10,1,1], string, 21, Segment)
       };
%% @doc Decode the ZAU (Procedure authorization information) segment
decode(zau, Segment) ->
    #zau{
        prev_authorization_id = get_component([1,1,1], string, 15, Segment),
        payor_control_id = get_component([2,1,1], string, 15, Segment),
        authorization_status = get_component([3,1,1], string, 4, Segment),
        authorization_status_text = get_component([3,1,2], string, 15, Segment),
        pre_authorization_id = get_component([4,1,1], string, 15, Segment),
        pre_authorization_date = get_field([5], string, 8, Segment),
        copay = get_subcomponent([6,1,1,1], float, 10, Segment),
        copay_currency = get_subcomponent([6,1,1,2], string, 10, Segment)
       };
%% @doc Decode the ZIN (Additional insurance information) segment
decode(zin, Segment) ->
    #zin{
        eligibility_indicator = get_field([1], string, 1, Segment),
        patient_vat_status = get_component([2,1,1], string, 4, Segment),
        patient_vat_status_text = get_component([2,1,2], string, 7, Segment)
       };
decode(_SegmentId, Segment) ->
    {error, {unknown_segment_id, element(1, Segment)}}.


%% @doc Encode the AUT (Authorization information) segment as a tuple
encode_as_tuple(aut, Segment) ->
    {
      <<"AUT">>,
      {
        {
          %% [1,1,1]
          to_raw_value(Segment#aut.plan_id, string, 10),
          %% [1,1,2]
          to_raw_value(Segment#aut.plan_name, string, 20)
        }
      },
      {
        {
          %% [2,1,1]
          to_raw_value(Segment#aut.company_id, string, 6),
          %% [2,1,2]
          to_raw_value(Segment#aut.company_name, string, 30),
          %% [2,1,3]
          to_raw_value(Segment#aut.company_id_coding_system, string, 20)
        }
      },
      undefined,
      %% [4]
      to_raw_value(Segment#aut.start_date, date, 8),
      %% [5]
      to_raw_value(Segment#aut.end_date, date, 8),
      {
        {
          %% [6,1,1]
          to_raw_value(Segment#aut.authorization_id, string, 20)
        }
      },
      undefined,
      %% [8]
      to_raw_value(Segment#aut.requested_treatments, integer, 2),
      %% [9]
      to_raw_value(Segment#aut.authorized_treatments, integer, 2)
    };
%% @doc Encode the DG1 (Diagnosis information) segment as a tuple
encode_as_tuple(dg1, Segment) ->
    {
      <<"DG1">>,
      %% [1]
      to_raw_value(Segment#dg1.set_id, integer, 4),
          undefined,
      {
        {
          %% [3,1,1]
          to_raw_value(Segment#dg1.diagnosis_id, string, 20),
          %% [3,1,2]
          to_raw_value(Segment#dg1.name, string, 32),
          %% [3,1,3]
          to_raw_value(Segment#dg1.coding_system, string, 10)
        }
      },
      undefined, undefined,
      %% [6]
      to_raw_value(Segment#dg1.diagnosis_type, string, 2)
    };
%% @doc Encode the DSC (Continuation pointer) segment as a tuple
encode_as_tuple(dsc, Segment) ->
    {
      <<"DSC">>,
      %% [1]
      to_raw_value(Segment#dsc.continuation_pointer, string, 15)
    };
%% @doc Encode the DSP (Display data) segment as a tuple
encode_as_tuple(dsp, Segment) ->
    {
      <<"DSP">>,
      %% [1]
      to_raw_value(Segment#dsp.set_id, integer, 4),
      %% [2]
      to_raw_value(Segment#dsp.display_level, string, 4),
      %% [3]
      to_raw_value(Segment#dsp.data_line, string, 40),
      %% [4]
      to_raw_value(Segment#dsp.break_point, string, 2),
      %% [5]
      to_raw_value(Segment#dsp.result_id, string, 20)
    };
%% @doc Encode the ERR (Error information) segment as a tuple
encode_as_tuple(err, Segment) ->
    {
      <<"ERR">>,
      {
        {
          %% [1,1,1]
          to_raw_value(Segment#err.segment_id, string, 3),
          %% [1,1,2]
          to_raw_value(Segment#err.sequence, integer, 3),
          %% [1,1,3]
          to_raw_value(Segment#err.field_pos, integer, 3),
          {
            %% [1,1,4,1]
            to_raw_value(Segment#err.error_code, string, 9),
            %% [1,1,4,2]
            to_raw_value(Segment#err.error_text, string, 61)
          }
        }
      }
    };
%% @doc Encode the EVN (Event type) segment as a tuple
encode_as_tuple(evn, Segment) ->
    {
      <<"EVN">>,
      undefined,
      %% [2]
      to_raw_value(Segment#evn.recorded_date, date, 14),
      %% [3]
      to_raw_value(Segment#evn.planned_event_date, date, 14),
      %% [4]
      to_raw_value(Segment#evn.event_reason_code, string, 3)
    };
%% @doc Encode the IN1 (Insurance) segment as a tuple
encode_as_tuple(in1, Segment) ->
    {
      <<"IN1">>,
      %% [1]
      to_raw_value(Segment#in1.set_id, integer, 4),
      {
        {
          %% [2,1,1]
          to_raw_value(Segment#in1.plan_id, string, 20),
          %% [2,1,2]
          to_raw_value(Segment#in1.plan_name, string, 30)
        }
      },
      {
        {
          %% [3,1,1]
          to_raw_value(Segment#in1.company_id, string, 6),
            undefined, undefined,
          {
            %% [3,1,4,1]
            to_raw_value(Segment#in1.company_assigning_authority_id, string, 10),
            undefined, undefined, undefined,
            %% [3,1,4,5]
            to_raw_value(Segment#in1.company_id_type, string, 10)
          }
        }
      },
          undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,
      {
        {
          %% [14,1,1]
          to_raw_value(Segment#in1.authorization_number, string, 20),
          %% [14,1,2]
          to_raw_value(Segment#in1.auhtorization_date, date, 8)
        }
      }
    };
%% @doc Encode the MSA (Message acknowledgment) segment as a tuple
encode_as_tuple(msa, Segment) ->
    {
      <<"MSA">>,
      %% [1]
      to_raw_value(Segment#msa.ack_code, string, 2),
      %% [2]
      to_raw_value(Segment#msa.message_control_id, string, 20),
          undefined, undefined, undefined,
      {
        {
          %% [6,1,1]
          to_raw_value(Segment#msa.error_code, string, 10),
          %% [6,1,2]
          to_raw_value(Segment#msa.error_text, string, 40)
        }
      }
    };
%% @doc Encode the MSH (Message header) segment as a tuple
encode_as_tuple(msh, Segment) ->
    {
      <<"MSH">>,
      %% [1]
      to_raw_value(Segment#msh.field_separator, string, 1),
      %% [2]
      to_raw_value(Segment#msh.encoding_characters, string, 4),
      {
        {
          %% [3,1,1]
          to_raw_value(Segment#msh.sending_application_id, string, 12)
        }
      },
      {
        {
          %% [4,1,1]
          to_raw_value(Segment#msh.sending_facility_id, string, 12),
          %% [4,1,2]
          to_raw_value(Segment#msh.sending_facility_universal_id, string, 20),
          %% [4,1,3]
          to_raw_value(Segment#msh.sending_facility_universal_id_type, string, 20)
        }
      },
      {
        {
          %% [5,1,1]
          to_raw_value(Segment#msh.receiving_application_id, string, 12)
        }
      },
      {
        {
          %% [6,1,1]
          to_raw_value(Segment#msh.receiving_facility_id, string, 12),
          %% [6,1,2]
          to_raw_value(Segment#msh.receiving_facility_universal_id, string, 20),
          %% [6,1,3]
          to_raw_value(Segment#msh.receiving_facility_universal_id_type, string, 20)
        }
      },
      %% [7]
      to_raw_value(Segment#msh.message_date, date, 14),
          undefined,
      {
        {
          %% [9,1,1]
          to_raw_value(Segment#msh.message_type, string, 3),
          %% [9,1,2]
          to_raw_value(Segment#msh.trigger_event, string, 3),
          %% [9,1,3]
          to_raw_value(Segment#msh.message_structure, string, 7)
        }
      },
      %% [10]
      to_raw_value(Segment#msh.message_control_id, string, 20),
      %% [11]
      to_raw_value(Segment#msh.processing_id, string, 3),
      %% [12]
      to_raw_value(Segment#msh.version, string, 8),
      undefined, undefined,
      %% [15]
      to_raw_value(Segment#msh.accept_ack_type, string, 2),
      %% [16]
      to_raw_value(Segment#msh.application_ack_type, string, 2),
      %% [17]
      to_raw_value(Segment#msh.country_code, string, 3)
    };
%% @doc Encode the NTE (Notes and comments) segment as a tuple
encode_as_tuple(nte, Segment) ->
    {
      <<"NTE">>,
      %% [1]
      to_raw_value(Segment#nte.set_id, integer, 4),
      undefined,
      %% [3]
      to_raw_value(Segment#nte.comment, string, 512)
    };
%% @doc Encode the PID (Patient information) segment as a tuple
encode_as_tuple(pid, Segment) ->
    {
      <<"PID">>,
      %% [1]
      to_raw_value(Segment#pid.set_id, integer, 4),
          undefined,
      {
        {
          %% [3,1,1]
          to_raw_value(Segment#pid.patient_id, string, 20),
            undefined, undefined,
          {
            %% [3,1,4,1]
            to_raw_value(Segment#pid.assigning_authority_id, string, 6),
            %% [3,1,4,2]
            to_raw_value(Segment#pid.assigning_authority_universal_id, string, 6),
            %% [3,1,4,3]
            to_raw_value(Segment#pid.assigning_authority_universal_id_type, string, 10)
          },
          %% [3,1,5]
          to_raw_value(Segment#pid.id_type, string, 2),
          %% [3,2,1]
          to_raw_value(Segment#pid.patient_document_id, string, 20),
          undefined, undefined, undefined,
          %% [3,2,5]
          to_raw_value(Segment#pid.patient_document_id_type, string, 2)
        }
      },
          undefined,
      {
        {
          %% [5,1,1]
          to_raw_value(Segment#pid.last_name, string, 25),
          %% [5,1,2]
          to_raw_value(Segment#pid.first_name, string, 25)
        }
      }
    };
%% @doc Encode the PR1 (Procedure information) segment as a tuple
encode_as_tuple(pr1, Segment) ->
    {
      <<"PR1">>,
      %% [1]
      to_raw_value(Segment#pr1.set_id, integer, 4),
          undefined,
      {
        {
          %% [3,1,1]
          to_raw_value(Segment#pr1.procedure_id, string, 20),
          %% [3,1,2]
          to_raw_value(Segment#pr1.procedure_name, string, 30),
          %% [3,1,3]
          to_raw_value(Segment#pr1.coding_system, string, 4)
        }
      },
      undefined,
      %% [5]
      to_raw_value(Segment#pr1.date, date, 14)
    };
%% @doc Encode the PRD (Provider data) segment as a tuple
encode_as_tuple(prd, Segment) ->
    {
      <<"PRD">>,
      {
        {
          %% [1,1,1]
          to_raw_value(Segment#prd.role_id, string, 5),
          %% [1,1,2]
          to_raw_value(Segment#prd.role_name, string, 30),
          %% [1,1,3]
          to_raw_value(Segment#prd.role_coding_system, string, 7),
          %% [1,2,1]
          to_raw_value(Segment#prd.specialty_id, string, 5),
          %% [1,2,2]
          to_raw_value(Segment#prd.specialty_name, string, 30),
          %% [1,2,3]
          to_raw_value(Segment#prd.specialty_coding_system, string, 7)
        }
      },
      {
        {
          %% [2,1,1]
          to_raw_value(Segment#prd.last_name, string, 40),
          %% [2,1,2]
          to_raw_value(Segment#prd.first_name, string, 30)
        }
      },
      {
        {
          %% [3,1,1]
          to_raw_value(Segment#prd.street, string, 20),
          %% [3,1,2]
          to_raw_value(Segment#prd.other_designation, string, 20),
          %% [3,1,3]
          to_raw_value(Segment#prd.city, string, 30),
          %% [3,1,4]
          to_raw_value(Segment#prd.state, string, 1),
          %% [3,1,5]
          to_raw_value(Segment#prd.postal_code, string, 10),
          %% [3,1,6]
          to_raw_value(Segment#prd.country_code, string, 3),
          %% [3,1,7]
          to_raw_value(Segment#prd.address_type, string, 1)
        }
      },
          undefined, undefined, undefined,
      {
        {
          %% [7,1,1]
          to_raw_value(Segment#prd.provider_id, string, 15),
          {
            %% [7,1,2,1]
            to_raw_value(Segment#prd.provider_id_type, string, 2),
            %% [7,1,2,2]
            to_raw_value(Segment#prd.provider_id_type_medical, string, 1),
            %% [7,1,2,3]
            to_raw_value(Segment#prd.provider_id_type_province, string, 1)
          },
          %% [7,1,3]
          to_raw_value(Segment#prd.provider_id_alternate_qualifier, string, 8)
        }
      }
    };
%% @doc Encode the PV1 (Patient visit) segment as a tuple
encode_as_tuple(pv1, Segment) ->
    {
      <<"PV1">>,
      %% [1]
      to_raw_value(Segment#pv1.set_id, string, 4),
      %% [2]
      to_raw_value(Segment#pv1.patient_class, string, 1),
      {
        {
          %% [3,1,1]
          to_raw_value(Segment#pv1.patient_point_of_care, string, 10),
          undefined, undefined,
          %% [3,1,4]
          to_raw_value(Segment#pv1.patient_location_facility, string, 21)
        }
      },
      %% [4]
      to_raw_value(Segment#pv1.admission_type, string, 34),
          undefined, undefined,
      {
        {
          %% [7,1,1]
          to_raw_value(Segment#pv1.attending_doctor_id, string, 20),
          %% [7,1,2]
          to_raw_value(Segment#pv1.attending_doctor_last_name, string, 25),
          %% [7,1,3]
          to_raw_value(Segment#pv1.attending_doctor_first_name, string, 25),
          undefined, undefined, undefined, undefined, undefined,
          %% [7,1,9]
          to_raw_value(Segment#pv1.attending_doctor_assigning_authority, string, 21)
        }
      },
      {
        {
          %% [8,1,1]
          to_raw_value(Segment#pv1.referring_doctor_id, string, 20),
          %% [8,1,2]
          to_raw_value(Segment#pv1.referring_doctor_last_name, string, 25),
          %% [8,1,3]
          to_raw_value(Segment#pv1.referring_doctor_first_name, string, 25),
          undefined, undefined, undefined, undefined, undefined,
          %% [8,1,9]
          to_raw_value(Segment#pv1.referring_doctor_assigning_authority, string, 21)
        }
      },
      undefined,
      %% [10]
      to_raw_value(Segment#pv1.hospital_service, string, 99),
      undefined, undefined,
      %% [13]
      to_raw_value(Segment#pv1.readmission_indicator, string, 2),
      undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,
      %% [36]
      to_raw_value(Segment#pv1.discharge_diposition, string, 3),
      undefined, undefined, undefined, undefined, undefined, undefined, undefined,
      %% [44]
      to_raw_value(Segment#pv1.admit_date, date, 12),
      %% [45]
      to_raw_value(Segment#pv1.discharge_date, date, 12),
      undefined, undefined, undefined, undefined, undefined,
      %% [51]
      to_raw_value(Segment#pv1.visit_indicator, string, 1)
    };
%% @doc Encode the PV2 (Patient visit - additional information) segment as a tuple
encode_as_tuple(pv2, Segment) ->
    {
      <<"PV2">>,
          undefined, undefined, undefined,
      {
        {
          %% [4,1,1]
          to_raw_value(Segment#pv2.transfer_reason_id, string, 20)
        }
      }
    };
%% @doc Encode the QAK (Query acknowledgment) segment as a tuple
encode_as_tuple(qak, Segment) ->
    {
      <<"QAK">>,
      %% [1]
      to_raw_value(Segment#qak.query_tag, string, 32),
      %% [2]
      to_raw_value(Segment#qak.query_response_status, string, 4),
      {
        {
          %% [3,1,1]
          to_raw_value(Segment#qak.query_id, string, 14),
          %% [3,1,2]
          to_raw_value(Segment#qak.query_name, string, 30)
        }
      }
    };
%% @doc Encode the QPD_Q15 (Query parameter definition -- procedure totals query) segment as a tuple
encode_as_tuple(qpd_q15, Segment) ->
    {
      <<"QPD_Q15">>,
      {
        {
          %% [1,1,1]
          to_raw_value(Segment#qpd_q15.query_id, string, 20),
          %% [1,1,2]
          to_raw_value(Segment#qpd_q15.query_name, string, 30)
        }
      },
      %% [2]
      to_raw_value(Segment#qpd_q15.query_tag, string, 32),
      {
        {
          %% [3,1,1]
          to_raw_value(Segment#qpd_q15.provider_id, string, 15),
          %% [3,1,2]
          to_raw_value(Segment#qpd_q15.provider_id_type, string, 4)
        }
      },
      %% [4]
      to_raw_value(Segment#qpd_q15.start_date, date, 12),
      %% [5]
      to_raw_value(Segment#qpd_q15.end_date, date, 12),
      {
        {
          %% [6,1,1]
          to_raw_value(Segment#qpd_q15.procedure_id, string, 30),
          %% [6,1,2]
          to_raw_value(Segment#qpd_q15.procedure_coding_system, string, 8)
        }
      },
      {
        {
          %% [7,1,1]
          to_raw_value(Segment#qpd_q15.authorizer_id, string, 6)
        }
      }
    };
%% @doc Encode the RCP (Response control parameter) segment as a tuple
encode_as_tuple(rcp, Segment) ->
    {
      <<"RCP">>,
      %% [1]
      to_raw_value(Segment#rcp.query_priority, string, 1),
      {
        {
          %% [2,1,1]
          to_raw_value(Segment#rcp.response_limit, integer, 10),
          {
            %% [2,1,2,1]
            to_raw_value(Segment#rcp.response_unit, string, 2)
          }
        }
      },
      {
        {
          %% [3,1,1]
          to_raw_value(Segment#rcp.response_modality_id, string, 10)
        }
      },
      %% [4]
      to_raw_value(Segment#rcp.execution_date, date, 12),
      undefined,
      %% [6]
      to_raw_value(Segment#rcp.sort_by, string, 512)
    };
%% @doc Encode the RF1 (Referral information) segment as a tuple
encode_as_tuple(rf1, Segment) ->
    {
      <<"RF1">>,
      {
        {
          %% [1,1,1]
          to_raw_value(Segment#rf1.referral_status_id, string, 5),
          %% [1,1,2]
          to_raw_value(Segment#rf1.referral_status_description, string, 15)
        }
      },
          undefined,
      {
        {
          %% [3,1,1]
          to_raw_value(Segment#rf1.referral_type_id, string, 5),
          %% [3,1,2]
          to_raw_value(Segment#rf1.referral_type_description, string, 15)
        }
      },
          undefined, undefined,
      {
        {
          %% [6,1,1]
          to_raw_value(Segment#rf1.originating_referral_id, string, 15)
        }
      },
      %% [7]
      to_raw_value(Segment#rf1.effective_date, date, 12),
      %% [8]
      to_raw_value(Segment#rf1.expiration_date, date, 12),
      %% [9]
      to_raw_value(Segment#rf1.process_date, date, 12),
      {
        {
          %% [10,1,1]
          to_raw_value(Segment#rf1.referral_reason_id, string, 21)
        }
      }
    };
%% @doc Encode the ZAU (Procedure authorization information) segment as a tuple
encode_as_tuple(zau, Segment) ->
    {
      <<"ZAU">>,
      {
        {
          %% [1,1,1]
          to_raw_value(Segment#zau.prev_authorization_id, string, 15)
        }
      },
      {
        {
          %% [2,1,1]
          to_raw_value(Segment#zau.payor_control_id, string, 15)
        }
      },
      {
        {
          %% [3,1,1]
          to_raw_value(Segment#zau.authorization_status, string, 4),
          %% [3,1,2]
          to_raw_value(Segment#zau.authorization_status_text, string, 15)
        }
      },
      {
        {
          %% [4,1,1]
          to_raw_value(Segment#zau.pre_authorization_id, string, 15)
        }
      },
      %% [5]
      to_raw_value(Segment#zau.pre_authorization_date, string, 8),
      {
        {
          {
            %% [6,1,1,1]
            to_raw_value(Segment#zau.copay, float, 10),
            %% [6,1,1,2]
            to_raw_value(Segment#zau.copay_currency, string, 10)
          }
        }
      }
    };
%% @doc Encode the ZIN (Additional insurance information) segment as a tuple
encode_as_tuple(zin, Segment) ->
    {
      <<"ZIN">>,
      %% [1]
      to_raw_value(Segment#zin.eligibility_indicator, string, 1),
      {
        {
          %% [2,1,1]
          to_raw_value(Segment#zin.patient_vat_status, string, 4),
          %% [2,1,2]
          to_raw_value(Segment#zin.patient_vat_status_text, string, 7)
        }
      }
    }.


%% @doc Encode the AUT (Authorization information) segment as a list
encode_as_list(aut, Segment) ->
    [
      <<"AUT">>,
      [
        [
          %% [1,1,1]
          to_raw_value(Segment#aut.plan_id, string, 10),
          %% [1,1,2]
          to_raw_value(Segment#aut.plan_name, string, 20)
        ]
      ],
      [
        [
          %% [2,1,1]
          to_raw_value(Segment#aut.company_id, string, 6),
          %% [2,1,2]
          to_raw_value(Segment#aut.company_name, string, 30),
          %% [2,1,3]
          to_raw_value(Segment#aut.company_id_coding_system, string, 20)
        ]
      ],
      undefined,
      %% [4]
      to_raw_value(Segment#aut.start_date, date, 8),
      %% [5]
      to_raw_value(Segment#aut.end_date, date, 8),
      [
        [
          %% [6,1,1]
          to_raw_value(Segment#aut.authorization_id, string, 20)
        ]
      ],
      undefined,
      %% [8]
      to_raw_value(Segment#aut.requested_treatments, integer, 2),
      %% [9]
      to_raw_value(Segment#aut.authorized_treatments, integer, 2)
    ];
%% @doc Encode the DG1 (Diagnosis information) segment as a list
encode_as_list(dg1, Segment) ->
    [
      <<"DG1">>,
      %% [1]
      to_raw_value(Segment#dg1.set_id, integer, 4),
          undefined,
      [
        [
          %% [3,1,1]
          to_raw_value(Segment#dg1.diagnosis_id, string, 20),
          %% [3,1,2]
          to_raw_value(Segment#dg1.name, string, 32),
          %% [3,1,3]
          to_raw_value(Segment#dg1.coding_system, string, 10)
        ]
      ],
      undefined, undefined,
      %% [6]
      to_raw_value(Segment#dg1.diagnosis_type, string, 2)
    ];
%% @doc Encode the DSC (Continuation pointer) segment as a list
encode_as_list(dsc, Segment) ->
    [
      <<"DSC">>,
      %% [1]
      to_raw_value(Segment#dsc.continuation_pointer, string, 15)
    ];
%% @doc Encode the DSP (Display data) segment as a list
encode_as_list(dsp, Segment) ->
    [
      <<"DSP">>,
      %% [1]
      to_raw_value(Segment#dsp.set_id, integer, 4),
      %% [2]
      to_raw_value(Segment#dsp.display_level, string, 4),
      %% [3]
      to_raw_value(Segment#dsp.data_line, string, 40),
      %% [4]
      to_raw_value(Segment#dsp.break_point, string, 2),
      %% [5]
      to_raw_value(Segment#dsp.result_id, string, 20)
    ];
%% @doc Encode the ERR (Error information) segment as a list
encode_as_list(err, Segment) ->
    [
      <<"ERR">>,
      [
        [
          %% [1,1,1]
          to_raw_value(Segment#err.segment_id, string, 3),
          %% [1,1,2]
          to_raw_value(Segment#err.sequence, integer, 3),
          %% [1,1,3]
          to_raw_value(Segment#err.field_pos, integer, 3),
          [
            %% [1,1,4,1]
            to_raw_value(Segment#err.error_code, string, 9),
            %% [1,1,4,2]
            to_raw_value(Segment#err.error_text, string, 61)
          ]
        ]
      ]
    ];
%% @doc Encode the EVN (Event type) segment as a list
encode_as_list(evn, Segment) ->
    [
      <<"EVN">>,
      undefined,
      %% [2]
      to_raw_value(Segment#evn.recorded_date, date, 14),
      %% [3]
      to_raw_value(Segment#evn.planned_event_date, date, 14),
      %% [4]
      to_raw_value(Segment#evn.event_reason_code, string, 3)
    ];
%% @doc Encode the IN1 (Insurance) segment as a list
encode_as_list(in1, Segment) ->
    [
      <<"IN1">>,
      %% [1]
      to_raw_value(Segment#in1.set_id, integer, 4),
      [
        [
          %% [2,1,1]
          to_raw_value(Segment#in1.plan_id, string, 20),
          %% [2,1,2]
          to_raw_value(Segment#in1.plan_name, string, 30)
        ]
      ],
      [
        [
          %% [3,1,1]
          to_raw_value(Segment#in1.company_id, string, 6),
            undefined, undefined,
          [
            %% [3,1,4,1]
            to_raw_value(Segment#in1.company_assigning_authority_id, string, 10),
            undefined, undefined, undefined,
            %% [3,1,4,5]
            to_raw_value(Segment#in1.company_id_type, string, 10)
          ]
        ]
      ],
          undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,
      [
        [
          %% [14,1,1]
          to_raw_value(Segment#in1.authorization_number, string, 20),
          %% [14,1,2]
          to_raw_value(Segment#in1.auhtorization_date, date, 8)
        ]
      ]
    ];
%% @doc Encode the MSA (Message acknowledgment) segment as a list
encode_as_list(msa, Segment) ->
    [
      <<"MSA">>,
      %% [1]
      to_raw_value(Segment#msa.ack_code, string, 2),
      %% [2]
      to_raw_value(Segment#msa.message_control_id, string, 20),
          undefined, undefined, undefined,
      [
        [
          %% [6,1,1]
          to_raw_value(Segment#msa.error_code, string, 10),
          %% [6,1,2]
          to_raw_value(Segment#msa.error_text, string, 40)
        ]
      ]
    ];
%% @doc Encode the MSH (Message header) segment as a list
encode_as_list(msh, Segment) ->
    [
      <<"MSH">>,
      %% [1]
      to_raw_value(Segment#msh.field_separator, string, 1),
      %% [2]
      to_raw_value(Segment#msh.encoding_characters, string, 4),
      [
        [
          %% [3,1,1]
          to_raw_value(Segment#msh.sending_application_id, string, 12)
        ]
      ],
      [
        [
          %% [4,1,1]
          to_raw_value(Segment#msh.sending_facility_id, string, 12),
          %% [4,1,2]
          to_raw_value(Segment#msh.sending_facility_universal_id, string, 20),
          %% [4,1,3]
          to_raw_value(Segment#msh.sending_facility_universal_id_type, string, 20)
        ]
      ],
      [
        [
          %% [5,1,1]
          to_raw_value(Segment#msh.receiving_application_id, string, 12)
        ]
      ],
      [
        [
          %% [6,1,1]
          to_raw_value(Segment#msh.receiving_facility_id, string, 12),
          %% [6,1,2]
          to_raw_value(Segment#msh.receiving_facility_universal_id, string, 20),
          %% [6,1,3]
          to_raw_value(Segment#msh.receiving_facility_universal_id_type, string, 20)
        ]
      ],
      %% [7]
      to_raw_value(Segment#msh.message_date, date, 14),
          undefined,
      [
        [
          %% [9,1,1]
          to_raw_value(Segment#msh.message_type, string, 3),
          %% [9,1,2]
          to_raw_value(Segment#msh.trigger_event, string, 3),
          %% [9,1,3]
          to_raw_value(Segment#msh.message_structure, string, 7)
        ]
      ],
      %% [10]
      to_raw_value(Segment#msh.message_control_id, string, 20),
      %% [11]
      to_raw_value(Segment#msh.processing_id, string, 3),
      %% [12]
      to_raw_value(Segment#msh.version, string, 8),
      undefined, undefined,
      %% [15]
      to_raw_value(Segment#msh.accept_ack_type, string, 2),
      %% [16]
      to_raw_value(Segment#msh.application_ack_type, string, 2),
      %% [17]
      to_raw_value(Segment#msh.country_code, string, 3)
    ];
%% @doc Encode the NTE (Notes and comments) segment as a list
encode_as_list(nte, Segment) ->
    [
      <<"NTE">>,
      %% [1]
      to_raw_value(Segment#nte.set_id, integer, 4),
      undefined,
      %% [3]
      to_raw_value(Segment#nte.comment, string, 512)
    ];
%% @doc Encode the PID (Patient information) segment as a list
encode_as_list(pid, Segment) ->
    [
      <<"PID">>,
      %% [1]
      to_raw_value(Segment#pid.set_id, integer, 4),
          undefined,
      [
        [
          %% [3,1,1]
          to_raw_value(Segment#pid.patient_id, string, 20),
            undefined, undefined,
          [
            %% [3,1,4,1]
            to_raw_value(Segment#pid.assigning_authority_id, string, 6),
            %% [3,1,4,2]
            to_raw_value(Segment#pid.assigning_authority_universal_id, string, 6),
            %% [3,1,4,3]
            to_raw_value(Segment#pid.assigning_authority_universal_id_type, string, 10)
          ],
          %% [3,1,5]
          to_raw_value(Segment#pid.id_type, string, 2),
          %% [3,2,1]
          to_raw_value(Segment#pid.patient_document_id, string, 20),
          undefined, undefined, undefined,
          %% [3,2,5]
          to_raw_value(Segment#pid.patient_document_id_type, string, 2)
        ]
      ],
          undefined,
      [
        [
          %% [5,1,1]
          to_raw_value(Segment#pid.last_name, string, 25),
          %% [5,1,2]
          to_raw_value(Segment#pid.first_name, string, 25)
        ]
      ]
    ];
%% @doc Encode the PR1 (Procedure information) segment as a list
encode_as_list(pr1, Segment) ->
    [
      <<"PR1">>,
      %% [1]
      to_raw_value(Segment#pr1.set_id, integer, 4),
          undefined,
      [
        [
          %% [3,1,1]
          to_raw_value(Segment#pr1.procedure_id, string, 20),
          %% [3,1,2]
          to_raw_value(Segment#pr1.procedure_name, string, 30),
          %% [3,1,3]
          to_raw_value(Segment#pr1.coding_system, string, 4)
        ]
      ],
      undefined,
      %% [5]
      to_raw_value(Segment#pr1.date, date, 14)
    ];
%% @doc Encode the PRD (Provider data) segment as a list
encode_as_list(prd, Segment) ->
    [
      <<"PRD">>,
      [
        [
          %% [1,1,1]
          to_raw_value(Segment#prd.role_id, string, 5),
          %% [1,1,2]
          to_raw_value(Segment#prd.role_name, string, 30),
          %% [1,1,3]
          to_raw_value(Segment#prd.role_coding_system, string, 7),
          %% [1,2,1]
          to_raw_value(Segment#prd.specialty_id, string, 5),
          %% [1,2,2]
          to_raw_value(Segment#prd.specialty_name, string, 30),
          %% [1,2,3]
          to_raw_value(Segment#prd.specialty_coding_system, string, 7)
        ]
      ],
      [
        [
          %% [2,1,1]
          to_raw_value(Segment#prd.last_name, string, 40),
          %% [2,1,2]
          to_raw_value(Segment#prd.first_name, string, 30)
        ]
      ],
      [
        [
          %% [3,1,1]
          to_raw_value(Segment#prd.street, string, 20),
          %% [3,1,2]
          to_raw_value(Segment#prd.other_designation, string, 20),
          %% [3,1,3]
          to_raw_value(Segment#prd.city, string, 30),
          %% [3,1,4]
          to_raw_value(Segment#prd.state, string, 1),
          %% [3,1,5]
          to_raw_value(Segment#prd.postal_code, string, 10),
          %% [3,1,6]
          to_raw_value(Segment#prd.country_code, string, 3),
          %% [3,1,7]
          to_raw_value(Segment#prd.address_type, string, 1)
        ]
      ],
          undefined, undefined, undefined,
      [
        [
          %% [7,1,1]
          to_raw_value(Segment#prd.provider_id, string, 15),
          [
            %% [7,1,2,1]
            to_raw_value(Segment#prd.provider_id_type, string, 2),
            %% [7,1,2,2]
            to_raw_value(Segment#prd.provider_id_type_medical, string, 1),
            %% [7,1,2,3]
            to_raw_value(Segment#prd.provider_id_type_province, string, 1)
          ],
          %% [7,1,3]
          to_raw_value(Segment#prd.provider_id_alternate_qualifier, string, 8)
        ]
      ]
    ];
%% @doc Encode the PV1 (Patient visit) segment as a list
encode_as_list(pv1, Segment) ->
    [
      <<"PV1">>,
      %% [1]
      to_raw_value(Segment#pv1.set_id, string, 4),
      %% [2]
      to_raw_value(Segment#pv1.patient_class, string, 1),
      [
        [
          %% [3,1,1]
          to_raw_value(Segment#pv1.patient_point_of_care, string, 10),
          undefined, undefined,
          %% [3,1,4]
          to_raw_value(Segment#pv1.patient_location_facility, string, 21)
        ]
      ],
      %% [4]
      to_raw_value(Segment#pv1.admission_type, string, 34),
          undefined, undefined,
      [
        [
          %% [7,1,1]
          to_raw_value(Segment#pv1.attending_doctor_id, string, 20),
          %% [7,1,2]
          to_raw_value(Segment#pv1.attending_doctor_last_name, string, 25),
          %% [7,1,3]
          to_raw_value(Segment#pv1.attending_doctor_first_name, string, 25),
          undefined, undefined, undefined, undefined, undefined,
          %% [7,1,9]
          to_raw_value(Segment#pv1.attending_doctor_assigning_authority, string, 21)
        ]
      ],
      [
        [
          %% [8,1,1]
          to_raw_value(Segment#pv1.referring_doctor_id, string, 20),
          %% [8,1,2]
          to_raw_value(Segment#pv1.referring_doctor_last_name, string, 25),
          %% [8,1,3]
          to_raw_value(Segment#pv1.referring_doctor_first_name, string, 25),
          undefined, undefined, undefined, undefined, undefined,
          %% [8,1,9]
          to_raw_value(Segment#pv1.referring_doctor_assigning_authority, string, 21)
        ]
      ],
      undefined,
      %% [10]
      to_raw_value(Segment#pv1.hospital_service, string, 99),
      undefined, undefined,
      %% [13]
      to_raw_value(Segment#pv1.readmission_indicator, string, 2),
      undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,
      %% [36]
      to_raw_value(Segment#pv1.discharge_diposition, string, 3),
      undefined, undefined, undefined, undefined, undefined, undefined, undefined,
      %% [44]
      to_raw_value(Segment#pv1.admit_date, date, 12),
      %% [45]
      to_raw_value(Segment#pv1.discharge_date, date, 12),
      undefined, undefined, undefined, undefined, undefined,
      %% [51]
      to_raw_value(Segment#pv1.visit_indicator, string, 1)
    ];
%% @doc Encode the PV2 (Patient visit - additional information) segment as a list
encode_as_list(pv2, Segment) ->
    [
      <<"PV2">>,
          undefined, undefined, undefined,
      [
        [
          %% [4,1,1]
          to_raw_value(Segment#pv2.transfer_reason_id, string, 20)
        ]
      ]
    ];
%% @doc Encode the QAK (Query acknowledgment) segment as a list
encode_as_list(qak, Segment) ->
    [
      <<"QAK">>,
      %% [1]
      to_raw_value(Segment#qak.query_tag, string, 32),
      %% [2]
      to_raw_value(Segment#qak.query_response_status, string, 4),
      [
        [
          %% [3,1,1]
          to_raw_value(Segment#qak.query_id, string, 14),
          %% [3,1,2]
          to_raw_value(Segment#qak.query_name, string, 30)
        ]
      ]
    ];
%% @doc Encode the QPD_Q15 (Query parameter definition -- procedure totals query) segment as a list
encode_as_list(qpd_q15, Segment) ->
    [
      <<"QPD_Q15">>,
      [
        [
          %% [1,1,1]
          to_raw_value(Segment#qpd_q15.query_id, string, 20),
          %% [1,1,2]
          to_raw_value(Segment#qpd_q15.query_name, string, 30)
        ]
      ],
      %% [2]
      to_raw_value(Segment#qpd_q15.query_tag, string, 32),
      [
        [
          %% [3,1,1]
          to_raw_value(Segment#qpd_q15.provider_id, string, 15),
          %% [3,1,2]
          to_raw_value(Segment#qpd_q15.provider_id_type, string, 4)
        ]
      ],
      %% [4]
      to_raw_value(Segment#qpd_q15.start_date, date, 12),
      %% [5]
      to_raw_value(Segment#qpd_q15.end_date, date, 12),
      [
        [
          %% [6,1,1]
          to_raw_value(Segment#qpd_q15.procedure_id, string, 30),
          %% [6,1,2]
          to_raw_value(Segment#qpd_q15.procedure_coding_system, string, 8)
        ]
      ],
      [
        [
          %% [7,1,1]
          to_raw_value(Segment#qpd_q15.authorizer_id, string, 6)
        ]
      ]
    ];
%% @doc Encode the RCP (Response control parameter) segment as a list
encode_as_list(rcp, Segment) ->
    [
      <<"RCP">>,
      %% [1]
      to_raw_value(Segment#rcp.query_priority, string, 1),
      [
        [
          %% [2,1,1]
          to_raw_value(Segment#rcp.response_limit, integer, 10),
          [
            %% [2,1,2,1]
            to_raw_value(Segment#rcp.response_unit, string, 2)
          ]
        ]
      ],
      [
        [
          %% [3,1,1]
          to_raw_value(Segment#rcp.response_modality_id, string, 10)
        ]
      ],
      %% [4]
      to_raw_value(Segment#rcp.execution_date, date, 12),
      undefined,
      %% [6]
      to_raw_value(Segment#rcp.sort_by, string, 512)
    ];
%% @doc Encode the RF1 (Referral information) segment as a list
encode_as_list(rf1, Segment) ->
    [
      <<"RF1">>,
      [
        [
          %% [1,1,1]
          to_raw_value(Segment#rf1.referral_status_id, string, 5),
          %% [1,1,2]
          to_raw_value(Segment#rf1.referral_status_description, string, 15)
        ]
      ],
          undefined,
      [
        [
          %% [3,1,1]
          to_raw_value(Segment#rf1.referral_type_id, string, 5),
          %% [3,1,2]
          to_raw_value(Segment#rf1.referral_type_description, string, 15)
        ]
      ],
          undefined, undefined,
      [
        [
          %% [6,1,1]
          to_raw_value(Segment#rf1.originating_referral_id, string, 15)
        ]
      ],
      %% [7]
      to_raw_value(Segment#rf1.effective_date, date, 12),
      %% [8]
      to_raw_value(Segment#rf1.expiration_date, date, 12),
      %% [9]
      to_raw_value(Segment#rf1.process_date, date, 12),
      [
        [
          %% [10,1,1]
          to_raw_value(Segment#rf1.referral_reason_id, string, 21)
        ]
      ]
    ];
%% @doc Encode the ZAU (Procedure authorization information) segment as a list
encode_as_list(zau, Segment) ->
    [
      <<"ZAU">>,
      [
        [
          %% [1,1,1]
          to_raw_value(Segment#zau.prev_authorization_id, string, 15)
        ]
      ],
      [
        [
          %% [2,1,1]
          to_raw_value(Segment#zau.payor_control_id, string, 15)
        ]
      ],
      [
        [
          %% [3,1,1]
          to_raw_value(Segment#zau.authorization_status, string, 4),
          %% [3,1,2]
          to_raw_value(Segment#zau.authorization_status_text, string, 15)
        ]
      ],
      [
        [
          %% [4,1,1]
          to_raw_value(Segment#zau.pre_authorization_id, string, 15)
        ]
      ],
      %% [5]
      to_raw_value(Segment#zau.pre_authorization_date, string, 8),
      [
        [
          [
            %% [6,1,1,1]
            to_raw_value(Segment#zau.copay, float, 10),
            %% [6,1,1,2]
            to_raw_value(Segment#zau.copay_currency, string, 10)
          ]
        ]
      ]
    ];
%% @doc Encode the ZIN (Additional insurance information) segment as a list
encode_as_list(zin, Segment) ->
    [
      <<"ZIN">>,
      %% [1]
      to_raw_value(Segment#zin.eligibility_indicator, string, 1),
      [
        [
          %% [2,1,1]
          to_raw_value(Segment#zin.patient_vat_status, string, 4),
          %% [2,1,2]
          to_raw_value(Segment#zin.patient_vat_status_text, string, 7)
        ]
      ]
    ].


